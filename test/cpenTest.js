'use strict';

let mocha = require('mocha');
let expect = require("chai").expect;
let fs = require('fs');
let cpen = require('../src/cpen');
let util = require('../src/util')

describe('codepen project folder creation test', () => {

  it('should create folder if not existing', done => {
    cpen.create({
      html : 'html file',
      css : 'css file',
      js : 'js file'
    }, 'example', (e) => {
      expect(fs.statSync('example/index.html').isFile());
      expect(fs.statSync('example/style.css').isFile());
      expect(fs.statSync('example/main.js').isFile());
      done();
    });
  });

  afterEach(done => {
    fs.unlinkSync('example/index.html');
    fs.unlinkSync('example/style.css');
    fs.unlinkSync('example/main.js');
    fs.rmdirSync('example');
    done();
  });

});

describe('codepen file creation test', () => {

  beforeEach(done => {
    fs.mkdirSync('example');
    done();
  });

  afterEach(done => {
    fs.unlinkSync('example/index.html');
    fs.unlinkSync('example/style.css');
    fs.unlinkSync('example/main.js');
    fs.rmdirSync('example');
    done();
  });

  it('should create files', done => {
    cpen.create({
      html : 'html file',
      css : 'css file',
      js : 'js file'
    }, 'example', (e) => {
      expect(fs.statSync('example/index.html').isFile());
      expect(fs.statSync('example/style.css').isFile());
      expect(fs.statSync('example/main.js').isFile());

      done();
    });
  });

  it('should overwrite existing file data', done => {
    fs.appendFileSync('example/index.html', 'dummy');
    fs.appendFileSync('example/main.js', 'dummy');
    fs.appendFileSync('example/style.css', 'dummy');

    cpen.create({
      html : 'html file',
      css : 'css file',
      js : 'js file'
    }, 'example', (e) => {
      expect(fs.readFileSync('example/index.html', 'utf8')).to.not.contain('dummy');
      expect(fs.readFileSync('example/style.css', 'utf8')).to.not.contain('dummy');
      expect(fs.readFileSync('example/main.js', 'utf8')).to.not.contain('dummy');
      done();
    });

  });

});

describe('url validation test', done => {
  let baseUrl = 'http://codepen.io/aaa/pen/bbb';

  it('should validate full url ', done => {
    expect(util.parseUrl(baseUrl)).to.be.eql(baseUrl);
    done();
  });

  it('should validate full url HTTPS', done => {
    expect(util.parseUrl('https://codepen.io/aaa/pen/bbb'))
      .to.be.eql('https://codepen.io/aaa/pen/bbb');
    done();
  });

  it('should validate domain only url', done => {
    expect(util.parseUrl('codepen.io/aaa/pen/bbb'))
      .to.be.eql(baseUrl);
    done();
  });

  it('should validate pen reference only url', done => {
    expect(util.parseUrl('/aaa/pen/bbb'))
      .to.be.eql(baseUrl);
    done();
  });

});

describe('util test', done => {

  after(done => {
    fs.unlinkSync('test/test.txt');
    done();
  });

  it('should create new file', done => {
    util.createFile('test/test.txt', 'data', (err) => {
      expect(err).to.be.null;
      expect(fs.readFileSync('test/test.txt', 'utf8')).to.contain('data');
      done();
    });
  });

  it('should remove file if exists', done => {
    fs.appendFileSync('test/file', 'dummy');
    util.removeFileIfExists('test/file', (err) => {
      expect(err).to.be.null;
      expect(() => {
        fs.statSync('test/file').isFile();
      }).to.throw(Error);
      done();
    });
  });

  it('should not throw error if file does\'t exist', done => {
    util.removeFileIfExists('test/fakefile', (err) => {
      expect(err).to.be.null;
      done();
    });
  });

});
